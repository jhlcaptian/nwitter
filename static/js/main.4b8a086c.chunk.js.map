{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","console","log","update","src","width","height","NewFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","className","autoFocus","files","theFile","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","accept","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","newArr","docs","map","document","data","style","marginTop","Navigation","to","displayName","Profile","refreshUser","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","signOut","push","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","currentUser","onAuthStateChanged","user","args","Boolean","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4b8a086c.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport firebase from \"firebase/compat\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/firestore\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n  // Your web app's Firebase configuration\r\n  const firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGE_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n  \r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  export const firebaseInstance = firebase;\r\n  export const authService = firebase.auth();\r\n  export const dbService = firebase.firestore();\r\n  export const storageService = firebase.storage();","import { useState } from \"react\";\r\nimport { authService } from \"fbase\";\r\n\r\n\r\nconst AuthForm = () => {\r\n    const[email,setEmail] = useState(\"\");\r\n    const[password,setPassword] = useState(\"\");\r\n    const[newAccount,setNewAccount] = useState(true);\r\n    const[error,setError] = useState(\"\");\r\n    const toggleAccount = () => setNewAccount((prev)=> !prev);\r\n    const onChange = (event) =>{\r\n        //console.log(event.target.name);\r\n        //구조 분해 할당\r\n        //event 객체하위에 target -> 하위에 name,value\r\n        const{target:{name,value},} = event;\r\n        if(name === \"email\"){\r\n            setEmail(value);\r\n        }else if(name === \"password\"){\r\n            setPassword(value);\r\n        }\r\n        \r\n    }\r\n\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        try{\r\n            let data;\r\n            if(newAccount){\r\n                //createNewAccount\r\n                data = await authService.createUserWithEmailAndPassword(email,password);\r\n            }else{\r\n                //log in\r\n                data = await authService.signInWithEmailAndPassword(email,password);\r\n            }\r\n            //console.log(data);\r\n        }catch(error){\r\n            setError(error.message);\r\n           // console.log(error);\r\n        }\r\n        \r\n    }\r\n    return(\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange} />\r\n                <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange} />\r\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log-in\"} />\r\n                {error}\r\n            </form>\r\n            <span onClick={toggleAccount}>\r\n                {newAccount ? \"Sign In\" : \"Create Account\"}\r\n            </span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AuthForm;","import { useState } from \"react\";\r\nimport { authService,firebaseInstance } from \"fbase\";\r\nimport AuthForm from \"components/AuthForm\";\r\n\r\nconst Auth = () => {\r\n   //const toggleAccount = () => setNewAccount((prev)=> !prev);\r\n    const onSocialClick = async(event) => {\r\n        //console.log(event.target.name);\r\n        const {\r\n            target : {name},\r\n        } = event;\r\n        let provider;\r\n        if(name == 'google'){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }else if(name == 'github'){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n        //console.log(data);\r\n    }\r\n    //input change이벤트시 엘리먼트에서 두가지를 구분할때 name값으로 구분하는것이 효율적.\r\n    return(\r\n        <div>\r\n            <AuthForm />\r\n            <div>\r\n                <button onClick = {onSocialClick} name=\"google\">Continue with Google</button>\r\n                <button onClick = {onSocialClick} name=\"github\">Continue with Github</button>\r\n            </div>\r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default Auth;","import { dbService, storageService } from \"fbase\";\r\nimport { useState } from \"react\";\r\n\r\nconst Nweet = ({nweetObj,isOwner}) =>{\r\n    const [editing,setEditing] = useState(false);\r\n    const [newNweet,setNewNweet] = useState(nweetObj.text);\r\n\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"삭제하시겠습니까?\");\r\n        //console.log(ok);\r\n        if(ok){\r\n            //console.log(nweetObj.id);\r\n            //const data = await dbService.doc(`nweet/${nweetObj.id}`).delete();\r\n            //console.log(data);\r\n            await dbService.doc(`nweet/${nweetObj.id}`).delete();\r\n            if(nweetObj.attachmentUrl != \"\"){\r\n                await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n            }\r\n        }\r\n    }\r\n    //이전값 false를 반대로 세팅해준다\r\n    const toggleEditing = () => setEditing((prev)=> !prev);\r\n    //e.target.value값을 구조분해할당 용법으로 표현한것이다.\r\n    const onChange = (event) =>{\r\n        const {\r\n            target : {value},\r\n        } = event;\r\n        setNewNweet(value);\r\n    }\r\n\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        console.log(nweetObj.id, newNweet);\r\n        await dbService.doc(`nweet/${nweetObj.id}`).update({text : newNweet});\r\n        setEditing(false);\r\n    }\r\n    return(\r\n        <div>\r\n            {editing ? (\r\n                <>\r\n                    <form onSubmit={onSubmit}>\r\n                        <input onChange={onChange} value={newNweet} required />\r\n                        <input type=\"submit\" value=\"update Nweet\" />\r\n                    </form>\r\n                    <button onClick={toggleEditing}>Cancel</button>\r\n                </>\r\n            ) : (\r\n              <>  \r\n                <h4>{nweetObj.text}</h4>\r\n                {nweetObj.attachmentUrl &&(<img src={nweetObj.attachmentUrl} width=\"5opx\" height=\"50px\" />)}\r\n                {isOwner && (\r\n                    <>\r\n                        <button onClick={onDeleteClick}>Delete Nweet</button>\r\n                        <button onClick={toggleEditing}>Edit Nweet</button>    \r\n                    </>\r\n                )}\r\n               </>\r\n            )}    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nweet;","import { dbService,storageService } from \"fbase\";\r\nimport { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst NewFactory = ({userObj}) =>{\r\n    const[nweet,setNweet] = useState(\"\");\r\n    const[attachment,setAttachment] = useState(\"\");\r\n    \r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\";\r\n        if(attachmentUrl != \"\"){\r\n            //사용자id를 폴더이름으로, uuid4로 파일이름을 처리.\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        //console.log(await response.ref.getDownloadURL());\r\n        await dbService.collection(\"nweet\").add({\r\n            text:nweet,\r\n            createdAt:Date.now(),\r\n            creatorId:userObj.uid,\r\n            attachmentUrl,\r\n        });\r\n        setNweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            target : {value},\r\n        } = event;\r\n        setNweet(value);\r\n    }\r\n\r\n    const onFileChange = (event) =>{\r\n        console.log(event.target.files);\r\n        const{\r\n            target : {files},\r\n        } = event;\r\n        const theFile = files[0];\r\n        //파일을 미리보기 할때는 fileReader api를 쓰면 된다.\r\n        const reader = new FileReader();\r\n        //onloadEnd는 파일입력 후 발생하는 이벤트 result에 imgUrl이 들어있따.\r\n        reader.onloadend = (finishedEvent) => {\r\n            console.log(finishedEvent);\r\n            const{\r\n                currentTarget : {result},\r\n            } = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n    return(\r\n        <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Edit your nweet\"\r\n            value={nweet}\r\n            required\r\n            autoFocus\r\n            onChange={onChange}\r\n            className=\"formInput\"\r\n          />\r\n          <input type=\"file\" onChange={onFileChange} accept=\"image/*\" />\r\n          <input type=\"submit\" value=\"Nweet\" className=\"formBtn\" />\r\n          {attachment && (\r\n            <div>  \r\n                <img src={attachment} width=\"50px\" height=\"50px\" />\r\n                <button onClick={onClearAttachment}>Clear</button>\r\n            </div>\r\n          )}\r\n          </form>\r\n    );\r\n}\r\n\r\nexport default NewFactory;","import { useEffect,useState } from \"react\";\r\nimport { dbService,storageService } from \"fbase\";\r\nimport { addDoc,collection,query,onSnapshot,getDocs } from \"@firebase/firestore\";\r\nimport Nweet from \"components/Nweet\";\r\nimport { Fragment } from \"react\";\r\n//import { v4 as uuidv4 } from \"uuid\";\r\nimport NewFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ({userObj}) => {\r\n    console.log(userObj);\r\n    //const[nweet,setNweet] = useState(\"\");\r\n    const[nweets,setNweets] = useState([]);\r\n    //const[attachment,setAttachment] = useState(\"\");\r\n\r\n    /*\r\n    const getNweets = async() =>{\r\n        const q= query(collection(dbService,'nweet'));\r\n        const querySnapshot = await getDocs(q);\r\n        querySnapshot.forEach((doc)=>{\r\n            const nweetObj = {\r\n                ...doc.data(),\r\n                id:doc.id,\r\n            }\r\n            setNweets(prev =>[nweetObj,...prev]);\r\n        });\r\n        //const dbNweets = await dbService.collection(\"nweets\").get();\r\n        //console.log(dbNweets);\r\n    };*/\r\n\r\n    useEffect(()=>{\r\n        dbService.collection(\"nweet\").onSnapshot((snapshot)=>{\r\n            const newArr = snapshot.docs.map((document)=>({\r\n                id:document.id,\r\n                ...document.data(),\r\n            }));\r\n            setNweets(newArr);\r\n        })\r\n        //getNweets(nweets);\r\n    },[]);\r\n\r\n    console.log(nweets);\r\n    return(\r\n        <>\r\n        <NewFactory userObj={userObj} />\r\n        <div className=\"container\">\r\n            <div style={{ marginTop: 30 }}>\r\n            {nweets.map((nweet) => (\r\n                <Nweet\r\n                key={nweet.id}\r\n                nweetObj={nweet}\r\n                isOwner={nweet.creatorId === userObj.uid}\r\n                />\r\n            ))}\r\n            </div>\r\n        </div>\r\n\r\n      </>\r\n    );\r\n};\r\nexport default Home;","import { Link } from \"react-router-dom\";\r\n\r\nconst Navigation = ({userObj}) => {\r\n    return(\r\n        <nav>\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/profile\">{userObj.displayName}의 Profile</Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    ); \r\n};\r\n\r\nexport default Navigation;","import { authService,dbService } from \"fbase\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useEffect,useState } from \"react\";\r\nimport Nweet from \"components/Nweet\";\r\n\r\nconst Profile = ({userObj,refreshUser}) => {\r\n    //const[nweets,setNweets] = useState([]);\r\n    const[newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const history = useHistory();\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target : {value},\r\n        } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName != newDisplayName){\r\n            await userObj.updateProfile({displayName : newDisplayName});    \r\n            refreshUser();\r\n        }\r\n    }\r\n    /*\r\n    const getMyNweets = async() => {\r\n        const nweets = await dbService.collection('nweet').where(\"creatorId\", \"==\",userObj.uid).orderBy(\"createdAt\",\"asc\").get();\r\n        //실제 데이터 목록\r\n        const data = nweets.docs.map((doc) => doc.data());\r\n        //array를 setState해준다 Home.js하고 또~옥 같이해주면 되지잉~\r\n        setNweets(data);\r\n    };\r\n\r\n    //Profile컴포넌트가 렌더링된 이후 실행될 함수\r\n    useEffect(() => {\r\n        getMyNweets();    \r\n    },[]);\r\n    \r\n    <div className=\"container\">\r\n        <div style={{ marginTop: 30 }}>\r\n        {nweets && nweets.map((nweet) => (\r\n            <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwner={nweet.creatorId === userObj.uid}\r\n            />\r\n        ))}\r\n    </div>\r\n    </div>\r\n    */\r\n    return(\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\" placeholder=\"Display name\" onChange={onChange} value={newDisplayName} />\r\n                <input type=\"submit\" value=\"Update Profile\" />\r\n            </form>\r\n            <button onClick = {onLogOutClick}>Log Out</button>\r\n        </>\r\n    );\r\n};\r\nexport default Profile;","import { HashRouter as Router, Route,Switch, } from \"react-router-dom\";\r\n//Redirect <Redirect from=\"+\" to=\"/\" />     \r\nimport { useState } from \"react\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Navigation from \"./Navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\nconst AppRouter = ({isLoggedIn,userObj,refreshUser}) => {\r\n    return(\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj} />}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                  <>    \r\n                    <Route exact path=\"/\">\r\n                        <Home userObj={userObj} />   \r\n                    </Route>\r\n                    <Route exact path=\"/profile\">\r\n                        <Profile userObj={userObj} refreshUser={refreshUser} />   \r\n                    </Route>\r\n                  </>\r\n                    ) : (\r\n                    <Route exact path=\"/\">\r\n                        <Auth />   \r\n                    </Route>        \r\n                )}    \r\n                <Route />\r\n                      \r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default AppRouter;","import AppRouter from \"components/Router\";\nimport { useState,useEffect } from \"react\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const[init,setInit] = useState(false);\n  //const[isLoggedIn,setIsLoggedIn] = useState(authService.currentUser);\n  const[userObj,setUserObj]=useState(null);\n\n  console.log(authService.currentUser);\n  const refreshUser = () =>{\n    const user = authService.currentUser;\n    //setUserObj(authService.currentUser);\n    setUserObj({\n      uid : user.uid,\n      displayName : user.displayName,\n      updateProfile :(args) =>  user.updateProfile(args),\n    });\n  }\n  //setInterval(() => console.log(authService.currentUser),2000);\nuseEffect(()=> {authService.onAuthStateChanged((user) =>{  \n    if(user){\n      //setIsLoggedIn(user);\n      //setUserObj(user);\n      setUserObj({\n        uid : user.uid,\n        displayName : user.displayName,\n        updateProfile :(args) => user.updateProfile(args),\n      });\n    }else{\n      setUserObj(false);\n      //setIsLoggedIn(false);\n    }\n    setInit(true);\n  });\n},[]);\n  return (\n    <>\n      {init? <AppRouter refreshUser = {refreshUser} isLoggedIn = {Boolean(userObj)} userObj={userObj}/> : \"initializing...\"} \n       \n    </>\n    //jsx에 자바스크립트 코드를 넣을떄는 ()로 감싸준다. <footer>&copy; {new Date().getFullYear()}Nwitter</footer>\n  );\n    \n}   \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport firebase from \"firebase/compat/app\";\n//import firebase from 'fbase';\n//console.log(firebase);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n   \n   "],"sourceRoot":""}